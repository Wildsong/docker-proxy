version: "3.7"
volumes:
  certs:
    name: proxy_certs
  shared_html:
    name: proxy_html
  static_html:
    name: proxy_static
  acme:
    name: proxy_letsencrypt_acme
  conf:
    name: proxy_conf
  htpasswd:
    name: proxy_htpasswd
    
networks:
  # Any services that want to be proxied need to use this network
  proxy:
    name: ${NETWORK_NAME}
    external: true

services:
  proxy:
    # This is the nginx-based reverse proxy.
    container_name: proxy_nginx
    image: nginxproxy/nginx-proxy
    environment:
      TRUST_DOWNSTREAM_PROXY: "true"
      RESOLVERS: "10.10.10.21 10.10.10.22"
    networks:
      proxy:
        aliases:
          - proxy
    # *** LET'S ENCRYPT WON'T WORK UNLESS port 80 and 443 are both visible on the INTERNET  ***
    # *** If you disable port 80, the problem will be masked until a vhost needs to get     ***
    # *** new certs. It will complain about .well-known/* being inaccessible.               ***
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
    volumes:
      - ./network_internal.conf:/etc/nginx/network_internal.conf
      - ./vhost.d:/etc/nginx/vhost.d
      - shared_html:/usr/share/nginx/html:ro
      # Certificates created by letsencrypt.
      - certs:/etc/nginx/certs:ro
      - htpasswd:/etc/nginx/htpasswd:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    restart: unless-stopped

  letsencrypt:
    # Companion that manages our Let's Encrypt certificates for us.
    # It will create new certs automatically whenever a new server comes online.
    container_name: proxy_letsencrypt
    image: nginxproxy/acme-companion:2.2.5
    networks:
      proxy:
        aliases:
          - letsencrypt
    environment:
      # Don't generate keys on BOTH proxy and letsencrypt, we share one!
#      DHPARAM_GENERATION: "false"
    # Don't enable both this and labels
      NGINX_PROXY_CONTAINER: proxy_nginx
    volumes:
      # Shared with proxy, certs and html have to be writable
      - certs:/etc/nginx/certs:rw
      - ./vhost.d:/etc/nginx/vhost.d
      - shared_html:/usr/share/nginx/html:rw
      - acme:/etc/acme.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - proxy
    # for docker-compose
    restart: unless-stopped
    
# There is a separate "healtcheck.sh" cron job running in the host, don't use this.
#    healthcheck:
#      test: ["CMD", "/usr/bin/curl", "-f", "http://localhost:80/"]
#      interval: 10s
#      timeout: 10s
#      retries: 3
#      start_period: 30s

# That's all!
