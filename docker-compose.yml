version: "3.7"
volumes:
  certs:
    name: proxy_certs
  dhparam:
    name: proxy_dhparam
  html:
    name: proxy_html
  acme:
    name: proxy_letsencrypt_acme
  conf:
    name: proxy_conf
  htpasswd:
    name: proxy_htpasswd
    
  photoshow_config:
    name: photoshow_config
  photoshow_thumbs:
    name: photoshow_thumbs

networks:
  # Any services that want to be proxied need to use this network
  proxy_net:
    name: proxy_net
    external: true

services:
  proxy:
    # This is the nginx-based reverse proxy.
    container_name: proxy_proxy
    image: nginx

# Labels never seem to work for me in docker compose
#    labels:
#      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    networks:
      proxy_net:
  
    # *** LET'S ENCRYPT WON'T WORK UNLESS port 80 and 443 are both visible on the INTERNET  ***
    # *** If you disable port 80, the problem will be masked until a vhost needs to get     ***
    # *** new certs. It will complain about .well-known/* being inaccessible.               ***
    ports:
      - "80:80/tcp"
      - "443:443/tcp"

    volumes:
      - ./network_internal.conf:/etc/nginx/network_internal.conf

      # Shared with letsencrypt and dockergen
      - ./vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html:ro
      - dhparam:/etc/nginx/dhparam:ro

      # Certificates created by letsencrypt.
      - certs:/etc/nginx/certs:ro

      # Contains the default.conf file written by dockergen
      - conf:/etc/nginx/conf.d:ro

      - htpasswd:/etc/nginx/htpasswd:ro
      
    # for docker-compose	  
    restart: unless-stopped
    # for swarm
#    deploy:
#      mode: global
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        window: 15s

  dockergen:
    # Watch the docker API on the socket.
    # Generate a proxy automatically for each web server that is started.
    # You have to set VIRTUAL_HOST for each web server to trigger it
    container_name: proxy_dockergen

    image: jwilder/docker-gen

# Labels never seem to work for me in docker compose
#    labels:
#      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen"

    command: -notify-sighup proxy_proxy -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes:
      # This is how docker-gen detects when containers come and go.
      - /var/run/docker.sock:/tmp/docker.sock:ro
      #
      - ./vhost.d:/etc/nginx/vhost.d
      #
      # The template docker-gen uses to build and maintain default.conf
      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl
      #
      # Here is where docker-gen writes the default.conf file
      - conf:/etc/nginx/conf.d:rw
      #
      # Not sure why docker-gen needs this but it does
      - certs:/etc/nginx/certs:ro
    networks:
      proxy_net:
    # This is for docker-compose only, swarm ignores it.
    depends_on:
      - proxy
    # for docker-compose	  
    restart: unless-stopped
    # for swarm
#    deploy:
#      mode: global
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        window: 15s

  letsencrypt:
    # Companion that manages our Let's Encrypt certificates for us.
    # It will create new certs automatically whenever a new server comes online.
    image: jrcs/letsencrypt-nginx-proxy-companion:2.0.1
    networks:
      proxy_net:
    environment:
      # Don't generate keys on BOTH proxy and letsencrypt, we share one!
      DHPARAM_GENERATION: "false"

    # Don't enable both this and labels
      NGINX_PROXY_CONTAINER: proxy_proxy
      NGINX_DOCKER_GEN_CONTAINER: proxy_dockergen
      
    volumes:
      # Shared with proxy, certs and html have to be writable
      - certs:/etc/nginx/certs:rw
      - dhparam:/etc/nginx/dhparam:ro
      - ./vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html:rw
      - acme:/etc/acme.sh
      # Watch the docker API.
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # This is for docker-compose only, swarm ignores it.
    depends_on:
      - proxy
      - dockergen
    # for docker-compose	  
    restart: unless-stopped
    # for swarm
#    deploy:
#      mode: global
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        window: 15s

  photoshow:
    image: linuxserver/photoshow:latest
    depends_on:
      - proxy
    env_file: .env
    environment:
# Uncomment for nginx proxy, note that
# we don't use this set up because we don't have a subdomain for this service, 
# instead we use https://giscache/photoshow/
#      VIRTUAL_HOST: ${PHOTOSHOW_VIRTUAL_HOST}
#      VIRTUAL_PORT: ${PHOTOSHOW_VIRTUAL_PORT}
#      NETWORK_ACCESS: internal
      TZ: ${TIMEZONE}
      PUID: 1000
      PGID: 1000
    volumes:
      - photoshow_config:/config
      - /media/photoshow:/Pictures
      - photoshow_thumbs:/Thumbs
    networks:
      proxy_net:
        aliases:
          - photoshow

    # for docker-compose	  
    restart: unless-stopped

    # for swarm
    #deploy:
    #  mode: global
    #  restart_policy:
    #    condition: any
    #    delay: 5s
    #    window: 15s
    #    max_attempts: 10
    
# There is a separate "healtcheck.sh" cron job running in the host, don't use this.
#    healthcheck:
#      test: ["CMD", "/usr/bin/curl", "-f", "http://localhost:80/"]
#      interval: 10s
#      timeout: 10s
#      retries: 3
#      start_period: 30s
